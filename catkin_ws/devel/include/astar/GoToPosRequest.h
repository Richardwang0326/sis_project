// Generated by gencpp from file astar/GoToPosRequest.msg
// DO NOT EDIT!


#ifndef ASTAR_MESSAGE_GOTOPOSREQUEST_H
#define ASTAR_MESSAGE_GOTOPOSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace astar
{
template <class ContainerAllocator>
struct GoToPosRequest_
{
  typedef GoToPosRequest_<ContainerAllocator> Type;

  GoToPosRequest_()
    : pos(0)  {
    }
  GoToPosRequest_(const ContainerAllocator& _alloc)
    : pos(0)  {
  (void)_alloc;
    }



   typedef int8_t _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::astar::GoToPosRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::astar::GoToPosRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoToPosRequest_

typedef ::astar::GoToPosRequest_<std::allocator<void> > GoToPosRequest;

typedef boost::shared_ptr< ::astar::GoToPosRequest > GoToPosRequestPtr;
typedef boost::shared_ptr< ::astar::GoToPosRequest const> GoToPosRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::astar::GoToPosRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::astar::GoToPosRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::astar::GoToPosRequest_<ContainerAllocator1> & lhs, const ::astar::GoToPosRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::astar::GoToPosRequest_<ContainerAllocator1> & lhs, const ::astar::GoToPosRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace astar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::astar::GoToPosRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::astar::GoToPosRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::astar::GoToPosRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::astar::GoToPosRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::astar::GoToPosRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::astar::GoToPosRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::astar::GoToPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82b076b0db1717b26c92c819d52e9d17";
  }

  static const char* value(const ::astar::GoToPosRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82b076b0db1717b2ULL;
  static const uint64_t static_value2 = 0x6c92c819d52e9d17ULL;
};

template<class ContainerAllocator>
struct DataType< ::astar::GoToPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "astar/GoToPosRequest";
  }

  static const char* value(const ::astar::GoToPosRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::astar::GoToPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int8 pos\n"
;
  }

  static const char* value(const ::astar::GoToPosRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::astar::GoToPosRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToPosRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::astar::GoToPosRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::astar::GoToPosRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASTAR_MESSAGE_GOTOPOSREQUEST_H
