// Generated by gencpp from file place/place_dataResponse.msg
// DO NOT EDIT!


#ifndef PLACE_MESSAGE_PLACE_DATARESPONSE_H
#define PLACE_MESSAGE_PLACE_DATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace place
{
template <class ContainerAllocator>
struct place_dataResponse_
{
  typedef place_dataResponse_<ContainerAllocator> Type;

  place_dataResponse_()
    : obj_id(0)  {
    }
  place_dataResponse_(const ContainerAllocator& _alloc)
    : obj_id(0)  {
  (void)_alloc;
    }



   typedef int64_t _obj_id_type;
  _obj_id_type obj_id;





  typedef boost::shared_ptr< ::place::place_dataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::place::place_dataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct place_dataResponse_

typedef ::place::place_dataResponse_<std::allocator<void> > place_dataResponse;

typedef boost::shared_ptr< ::place::place_dataResponse > place_dataResponsePtr;
typedef boost::shared_ptr< ::place::place_dataResponse const> place_dataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::place::place_dataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::place::place_dataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::place::place_dataResponse_<ContainerAllocator1> & lhs, const ::place::place_dataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.obj_id == rhs.obj_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::place::place_dataResponse_<ContainerAllocator1> & lhs, const ::place::place_dataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace place

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::place::place_dataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::place::place_dataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::place::place_dataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::place::place_dataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::place::place_dataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::place::place_dataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::place::place_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e08f6f64a7711d3f86900bee4784635e";
  }

  static const char* value(const ::place::place_dataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe08f6f64a7711d3fULL;
  static const uint64_t static_value2 = 0x86900bee4784635eULL;
};

template<class ContainerAllocator>
struct DataType< ::place::place_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "place/place_dataResponse";
  }

  static const char* value(const ::place::place_dataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::place::place_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 obj_id\n"
"\n"
;
  }

  static const char* value(const ::place::place_dataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::place::place_dataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct place_dataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::place::place_dataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::place::place_dataResponse_<ContainerAllocator>& v)
  {
    s << indent << "obj_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.obj_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLACE_MESSAGE_PLACE_DATARESPONSE_H
