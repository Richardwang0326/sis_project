// Generated by gencpp from file camera_rotation/find_plateRequest.msg
// DO NOT EDIT!


#ifndef CAMERA_ROTATION_MESSAGE_FIND_PLATEREQUEST_H
#define CAMERA_ROTATION_MESSAGE_FIND_PLATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera_rotation
{
template <class ContainerAllocator>
struct find_plateRequest_
{
  typedef find_plateRequest_<ContainerAllocator> Type;

  find_plateRequest_()
    : plate(0)  {
    }
  find_plateRequest_(const ContainerAllocator& _alloc)
    : plate(0)  {
  (void)_alloc;
    }



   typedef int64_t _plate_type;
  _plate_type plate;





  typedef boost::shared_ptr< ::camera_rotation::find_plateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_rotation::find_plateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct find_plateRequest_

typedef ::camera_rotation::find_plateRequest_<std::allocator<void> > find_plateRequest;

typedef boost::shared_ptr< ::camera_rotation::find_plateRequest > find_plateRequestPtr;
typedef boost::shared_ptr< ::camera_rotation::find_plateRequest const> find_plateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_rotation::find_plateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_rotation::find_plateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera_rotation::find_plateRequest_<ContainerAllocator1> & lhs, const ::camera_rotation::find_plateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.plate == rhs.plate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera_rotation::find_plateRequest_<ContainerAllocator1> & lhs, const ::camera_rotation::find_plateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera_rotation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::camera_rotation::find_plateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_rotation::find_plateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_rotation::find_plateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_rotation::find_plateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_rotation::find_plateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_rotation::find_plateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_rotation::find_plateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a290d7aaf76b6eee6bb753375aa3c6c";
  }

  static const char* value(const ::camera_rotation::find_plateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a290d7aaf76b6eeULL;
  static const uint64_t static_value2 = 0xe6bb753375aa3c6cULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_rotation::find_plateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_rotation/find_plateRequest";
  }

  static const char* value(const ::camera_rotation::find_plateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_rotation::find_plateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 plate\n"
;
  }

  static const char* value(const ::camera_rotation::find_plateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_rotation::find_plateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct find_plateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_rotation::find_plateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_rotation::find_plateRequest_<ContainerAllocator>& v)
  {
    s << indent << "plate: ";
    Printer<int64_t>::stream(s, indent + "  ", v.plate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_ROTATION_MESSAGE_FIND_PLATEREQUEST_H
